/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
//    alias(libs.plugins.jvm)

    // Apply the java-library plugin for API and implementation separation.
    `java-library`

    kotlin("jvm") version "1.9.23"

    jacoco

    id("com.ncorti.ktfmt.gradle") version "0.17.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    // Use the JUnit 5 integration.
    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api(libs.commons.math3)

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation(libs.guava)
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport) // report generates after run
}

// Configuring JaCoCo plugin settings
jacoco {
    toolVersion = "0.8.11"
    reportsDirectory.set(layout.buildDirectory.dir("coverage")) // directory for reports
}

tasks.jacocoTestReport {
    dependsOn(tasks.test) // tests are required to run before generating the report

    reports {
        xml.required = false
        html.required = true
        csv.required = true
        csv.outputLocation.set(layout.buildDirectory.file("jacoco/report.csv"))
    }
}

ktfmt {
    // KotlinLang style - 4 space indentation - From kotlinlang.org/docs/coding-conventions.html
    kotlinLangStyle()
    // blockIndent is the indent size used when a new block is opened, in spaces.
    blockIndent.set(4)
    // continuationIndent is the indent size used when a line is broken because it's too
    continuationIndent.set(4)
    // Whether ktfmt should automatically add/remove trailing commas.
    //manageTrailingCommas.set(true) current release doesn't support this feature

    removeUnusedImports.set(true)
}

tasks.register("checkFormat") { dependsOn(tasks.ktfmtCheck) }

tasks.register("format") { dependsOn(tasks.ktfmtFormat) }
